-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_sigmoid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mlp_sigmoid is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp_sigmoid_mlp_sigmoid,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.708000,HLS_SYN_LAT=65887,HLS_SYN_TPT=none,HLS_SYN_MEM=105,HLS_SYN_DSP=0,HLS_SYN_FF=2041,HLS_SYN_LUT=5330,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (90 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (90 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (90 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (90 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (90 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (90 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (90 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (90 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (90 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (90 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_101 : STD_LOGIC_VECTOR (8 downto 0) := "100000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_49 : STD_LOGIC_VECTOR (6 downto 0) := "1001001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal InputToLayer1Weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal InputToLayer1Weights_ce0 : STD_LOGIC;
    signal InputToLayer1Weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer1ToLayer2Weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Layer1ToLayer2Weights_ce0 : STD_LOGIC;
    signal Layer1ToLayer2Weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer2ToOutputWeights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Layer2ToOutputWeights_ce0 : STD_LOGIC;
    signal Layer2ToOutputWeights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln500_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln565_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal icmp_ln565_reg_1171_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_452 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_486 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_2_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_block_state13_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state20_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln523_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state46_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state47_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state48_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state49_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state50_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state51_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_state52_pp6_stage0_iter6 : BOOLEAN;
    signal ap_block_state53_pp6_stage0_iter7 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal ap_block_state79_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state80_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state81_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state82_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state83_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_state84_pp7_stage0_iter5 : BOOLEAN;
    signal ap_block_state85_pp7_stage0_iter6 : BOOLEAN;
    signal ap_block_state86_pp7_stage0_iter7 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal icmp_ln541_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal icmp_ln557_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal empty_15_fu_603_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_18_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_21_fu_637_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal empty_24_fu_654_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln500_fu_677_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal add_ln528_fu_705_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln528_reg_997 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln519_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln522_fu_717_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln522_reg_1007 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln523_fu_721_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln523_reg_1012 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal add_ln523_reg_1012_pp5_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln523_reg_1012_pp5_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln523_reg_1012_pp5_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln523_reg_1012_pp5_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln523_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln523_reg_1018_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal incoming_inputs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal add_ln545_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln536_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln540_fu_785_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln540_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln541_fu_789_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln541_reg_1067 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal add_ln541_reg_1067_pp6_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln541_reg_1067_pp6_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln541_reg_1067_pp6_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln541_reg_1067_pp6_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln541_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln541_reg_1073_pp6_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Layer1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal grp_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter7 : STD_LOGIC := '0';
    signal add_ln553_fu_841_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln553_reg_1107 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal icmp_ln553_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln553_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln553_reg_1116 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln556_fu_857_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln556_reg_1121 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln557_fu_861_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln557_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal add_ln557_reg_1126_pp7_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln557_reg_1126_pp7_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln557_reg_1126_pp7_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln557_reg_1126_pp7_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln557_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_1132_pp7_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Layer2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal grp_fu_911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter7 : STD_LOGIC := '0';
    signal add_ln565_fu_919_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal ap_block_state111_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state112_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state112_io : BOOLEAN;
    signal ap_block_state113_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state113_io : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal icmp_ln565_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_last_V_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_last_V_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state46 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter6 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state79 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter6 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state111 : STD_LOGIC;
    signal Layer1_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Layer1_out_ce0 : STD_LOGIC;
    signal Layer1_out_we0 : STD_LOGIC;
    signal Layer1_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer2_out_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Layer2_out_ce0 : STD_LOGIC;
    signal Layer2_out_we0 : STD_LOGIC;
    signal Layer2_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_layer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Out_layer_ce0 : STD_LOGIC;
    signal Out_layer_we0 : STD_LOGIC;
    signal Out_layer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_layer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal incoming_inputs_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal incoming_inputs_ce0 : STD_LOGIC;
    signal incoming_inputs_we0 : STD_LOGIC;
    signal incoming_inputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_360 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exitcond11021_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond10920_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_20_reg_382 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond10819_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_23_reg_393 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond10718_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_404 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_phi_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_phi17_reg_428 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_441 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_j_phi_fu_456_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal i_2_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_phi_mux_j_1_phi_fu_490_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal i_3_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_phi_mux_j_2_phi_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal p_cast_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln525_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln528_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_1_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_cast_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal bitcast_ln504_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_3_fu_738_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln525_fu_746_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_806_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln542_fu_814_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_882_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln559_fu_878_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln559_fu_890_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln559_1_fu_896_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_761_in_valid : STD_LOGIC;
    signal grp_fu_829_in_valid : STD_LOGIC;
    signal grp_fu_911_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (90 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal regslice_both_M_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal S_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_S_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_S_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_S_AXIS_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_S_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_S_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_S_AXIS_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_S_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_S_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_S_AXIS_V_last_V_U_ack_in : STD_LOGIC;
    signal M_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal M_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_M_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_M_AXIS_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_M_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_M_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_M_AXIS_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_M_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_M_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_M_AXIS_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_M_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_829_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_911_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mlp_sigmoid_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_fdiv_32ns_32ns_32_10_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_fexp_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_InputToLayer1Weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_Layer1ToLayer2Weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_Layer2ToOutputWeights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_Layer1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_Layer2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_Out_layer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_incoming_inputs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sigmoid_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    InputToLayer1Weights_U : component mlp_sigmoid_InputToLayer1Weights
    generic map (
        DataWidth => 32,
        AddressRange => 18688,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => InputToLayer1Weights_address0,
        ce0 => InputToLayer1Weights_ce0,
        q0 => InputToLayer1Weights_q0);

    Layer1ToLayer2Weights_U : component mlp_sigmoid_Layer1ToLayer2Weights
    generic map (
        DataWidth => 32,
        AddressRange => 32896,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer1ToLayer2Weights_address0,
        ce0 => Layer1ToLayer2Weights_ce0,
        q0 => Layer1ToLayer2Weights_q0);

    Layer2ToOutputWeights_U : component mlp_sigmoid_Layer2ToOutputWeights
    generic map (
        DataWidth => 32,
        AddressRange => 1161,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer2ToOutputWeights_address0,
        ce0 => Layer2ToOutputWeights_ce0,
        q0 => Layer2ToOutputWeights_q0);

    Layer1_out_U : component mlp_sigmoid_Layer1_out
    generic map (
        DataWidth => 32,
        AddressRange => 257,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer1_out_address0,
        ce0 => Layer1_out_ce0,
        we0 => Layer1_out_we0,
        d0 => Layer1_out_d0,
        q0 => Layer1_out_q0);

    Layer2_out_U : component mlp_sigmoid_Layer2_out
    generic map (
        DataWidth => 32,
        AddressRange => 129,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer2_out_address0,
        ce0 => Layer2_out_ce0,
        we0 => Layer2_out_we0,
        d0 => Layer2_out_d0,
        q0 => Layer2_out_q0);

    Out_layer_U : component mlp_sigmoid_Out_layer
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Out_layer_address0,
        ce0 => Out_layer_ce0,
        we0 => Out_layer_we0,
        d0 => Out_layer_d0,
        q0 => Out_layer_q0);

    incoming_inputs_U : component mlp_sigmoid_incoming_inputs
    generic map (
        DataWidth => 32,
        AddressRange => 73,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => incoming_inputs_address0,
        ce0 => incoming_inputs_ce0,
        we0 => incoming_inputs_we0,
        d0 => incoming_inputs_d0,
        q0 => incoming_inputs_q0);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component mlp_sigmoid_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_586,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component mlp_sigmoid_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_559_p0,
        din1 => grp_fu_559_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U3 : component mlp_sigmoid_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_591,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    fexp_32ns_32ns_32_8_full_dsp_1_U4 : component mlp_sigmoid_fexp_32ns_32ns_32_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_574_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_574_p2);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U5 : component mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_582,
        in_last => grp_fu_761_p2,
        in_valid => grp_fu_761_in_valid,
        out_data => grp_fu_761_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U6 : component mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_582,
        in_last => grp_fu_829_p2,
        in_valid => grp_fu_829_in_valid,
        out_data => grp_fu_829_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U7 : component mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => reg_582,
        in_last => grp_fu_911_p2,
        in_valid => grp_fu_911_in_valid,
        out_data => grp_fu_911_p3);

    regslice_both_S_AXIS_V_data_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_V_U_ack_in,
        data_out => S_AXIS_TDATA_int_regslice,
        vld_out => S_AXIS_TVALID_int_regslice,
        ack_out => S_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_S_AXIS_V_data_V_U_apdone_blk);

    regslice_both_S_AXIS_V_keep_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TKEEP,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_keep_V_U_ack_in,
        data_out => S_AXIS_TKEEP_int_regslice,
        vld_out => regslice_both_S_AXIS_V_keep_V_U_vld_out,
        ack_out => S_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_S_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_S_AXIS_V_strb_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TSTRB,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_strb_V_U_ack_in,
        data_out => S_AXIS_TSTRB_int_regslice,
        vld_out => regslice_both_S_AXIS_V_strb_V_U_vld_out,
        ack_out => S_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_S_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_S_AXIS_V_last_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_last_V_U_ack_in,
        data_out => S_AXIS_TLAST_int_regslice,
        vld_out => regslice_both_S_AXIS_V_last_V_U_vld_out,
        ack_out => S_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_S_AXIS_V_last_V_U_apdone_blk);

    regslice_both_M_AXIS_V_data_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TDATA_int_regslice,
        vld_in => M_AXIS_TVALID_int_regslice,
        ack_in => M_AXIS_TREADY_int_regslice,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_V_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_V_U_apdone_blk);

    regslice_both_M_AXIS_V_keep_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi_reg_415,
        vld_in => M_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_M_AXIS_V_keep_V_U_ack_in_dummy,
        data_out => M_AXIS_TKEEP,
        vld_out => regslice_both_M_AXIS_V_keep_V_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_M_AXIS_V_strb_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_phi17_reg_428,
        vld_in => M_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_M_AXIS_V_strb_V_U_ack_in_dummy,
        data_out => M_AXIS_TSTRB,
        vld_out => regslice_both_M_AXIS_V_strb_V_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_M_AXIS_V_last_V_U : component mlp_sigmoid_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => temp_last_V_reg_1180,
        vld_in => M_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_M_AXIS_V_last_V_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_M_AXIS_V_last_V_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln519_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state13)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                elsif (((icmp_ln519_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state46) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln536_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state46)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state46);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
                elsif (((icmp_ln536_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp6_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state79) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln553_fu_847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state79)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state79);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter6 <= ap_enable_reg_pp7_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter7 <= ap_enable_reg_pp7_iter6;
                elsif (((icmp_ln553_fu_847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp7_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state111) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln553_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state111)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state111);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif (((icmp_ln553_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_17_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_17_reg_371 <= ap_const_lv8_0;
            elsif (((exitcond10920_fu_626_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_17_reg_371 <= empty_18_fu_620_p2;
            end if; 
        end if;
    end process;

    empty_20_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_20_reg_382 <= ap_const_lv4_0;
            elsif (((exitcond10819_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                empty_20_reg_382 <= empty_21_fu_637_p2;
            end if; 
        end if;
    end process;

    empty_23_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                empty_23_reg_393 <= ap_const_lv7_0;
            elsif (((exitcond10718_fu_660_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                empty_23_reg_393 <= empty_24_fu_654_p2;
            end if; 
        end if;
    end process;

    empty_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11021_fu_609_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_360 <= empty_15_fu_603_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                empty_reg_360 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_441 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_1_reg_441 <= add_ln528_reg_997;
            end if; 
        end if;
    end process;

    i_2_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_2_reg_475 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_2_reg_475 <= add_ln545_reg_1052;
            end if; 
        end if;
    end process;

    i_3_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_3_reg_509 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
                i_3_reg_509 <= add_ln553_reg_1107;
            end if; 
        end if;
    end process;

    i_4_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln553_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                i_4_reg_543 <= ap_const_lv4_0;
            elsif (((icmp_ln565_fu_925_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                i_4_reg_543 <= add_ln565_fu_919_p2;
            end if; 
        end if;
    end process;

    i_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_404 <= ap_const_lv7_1;
            elsif ((not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) then 
                i_reg_404 <= add_ln500_fu_677_p2;
            end if; 
        end if;
    end process;

    j_1_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                j_1_reg_486 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln541_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                j_1_reg_486 <= add_ln541_reg_1067;
            end if; 
        end if;
    end process;

    j_2_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln553_fu_847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                j_2_reg_520 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln557_reg_1132 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                j_2_reg_520 <= add_ln557_reg_1126;
            end if; 
        end if;
    end process;

    j_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_reg_452 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln523_reg_1018 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                j_reg_452 <= add_ln523_reg_1012;
            end if; 
        end if;
    end process;

    sum_2_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                sum_2_reg_497 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp6_iter7 = ap_const_logic_1) and (icmp_ln541_reg_1073_pp6_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                sum_2_reg_497 <= grp_fu_829_p3;
            end if; 
        end if;
    end process;

    sum_4_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln553_fu_847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                sum_4_reg_531 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp7_iter7 = ap_const_logic_1) and (icmp_ln557_reg_1132_pp7_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                sum_4_reg_531 <= grp_fu_911_p3;
            end if; 
        end if;
    end process;

    sum_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_reg_463 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (icmp_ln523_reg_1018_pp5_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                sum_reg_463 <= grp_fu_761_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln523_reg_1012 <= add_ln523_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln523_reg_1012_pp5_iter1_reg <= add_ln523_reg_1012;
                icmp_ln523_reg_1018 <= icmp_ln523_fu_727_p2;
                icmp_ln523_reg_1018_pp5_iter1_reg <= icmp_ln523_reg_1018;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                add_ln523_reg_1012_pp5_iter2_reg <= add_ln523_reg_1012_pp5_iter1_reg;
                add_ln523_reg_1012_pp5_iter3_reg <= add_ln523_reg_1012_pp5_iter2_reg;
                add_ln523_reg_1012_pp5_iter4_reg <= add_ln523_reg_1012_pp5_iter3_reg;
                icmp_ln523_reg_1018_pp5_iter2_reg <= icmp_ln523_reg_1018_pp5_iter1_reg;
                icmp_ln523_reg_1018_pp5_iter3_reg <= icmp_ln523_reg_1018_pp5_iter2_reg;
                icmp_ln523_reg_1018_pp5_iter4_reg <= icmp_ln523_reg_1018_pp5_iter3_reg;
                icmp_ln523_reg_1018_pp5_iter5_reg <= icmp_ln523_reg_1018_pp5_iter4_reg;
                icmp_ln523_reg_1018_pp5_iter6_reg <= icmp_ln523_reg_1018_pp5_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln528_reg_997 <= add_ln528_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                add_ln541_reg_1067 <= add_ln541_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                add_ln541_reg_1067_pp6_iter1_reg <= add_ln541_reg_1067;
                icmp_ln541_reg_1073 <= icmp_ln541_fu_795_p2;
                icmp_ln541_reg_1073_pp6_iter1_reg <= icmp_ln541_reg_1073;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                add_ln541_reg_1067_pp6_iter2_reg <= add_ln541_reg_1067_pp6_iter1_reg;
                add_ln541_reg_1067_pp6_iter3_reg <= add_ln541_reg_1067_pp6_iter2_reg;
                add_ln541_reg_1067_pp6_iter4_reg <= add_ln541_reg_1067_pp6_iter3_reg;
                icmp_ln541_reg_1073_pp6_iter2_reg <= icmp_ln541_reg_1073_pp6_iter1_reg;
                icmp_ln541_reg_1073_pp6_iter3_reg <= icmp_ln541_reg_1073_pp6_iter2_reg;
                icmp_ln541_reg_1073_pp6_iter4_reg <= icmp_ln541_reg_1073_pp6_iter3_reg;
                icmp_ln541_reg_1073_pp6_iter5_reg <= icmp_ln541_reg_1073_pp6_iter4_reg;
                icmp_ln541_reg_1073_pp6_iter6_reg <= icmp_ln541_reg_1073_pp6_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln545_reg_1052 <= add_ln545_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                add_ln553_reg_1107 <= add_ln553_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                add_ln557_reg_1126 <= add_ln557_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                add_ln557_reg_1126_pp7_iter1_reg <= add_ln557_reg_1126;
                icmp_ln557_reg_1132 <= icmp_ln557_fu_867_p2;
                icmp_ln557_reg_1132_pp7_iter1_reg <= icmp_ln557_reg_1132;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                add_ln557_reg_1126_pp7_iter2_reg <= add_ln557_reg_1126_pp7_iter1_reg;
                add_ln557_reg_1126_pp7_iter3_reg <= add_ln557_reg_1126_pp7_iter2_reg;
                add_ln557_reg_1126_pp7_iter4_reg <= add_ln557_reg_1126_pp7_iter3_reg;
                icmp_ln557_reg_1132_pp7_iter2_reg <= icmp_ln557_reg_1132_pp7_iter1_reg;
                icmp_ln557_reg_1132_pp7_iter3_reg <= icmp_ln557_reg_1132_pp7_iter2_reg;
                icmp_ln557_reg_1132_pp7_iter4_reg <= icmp_ln557_reg_1132_pp7_iter3_reg;
                icmp_ln557_reg_1132_pp7_iter5_reg <= icmp_ln557_reg_1132_pp7_iter4_reg;
                icmp_ln557_reg_1132_pp7_iter6_reg <= icmp_ln557_reg_1132_pp7_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                icmp_ln565_reg_1171 <= icmp_ln565_fu_925_p2;
                icmp_ln565_reg_1171_pp8_iter1_reg <= icmp_ln565_reg_1171;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) then
                p_phi17_reg_428 <= S_AXIS_TSTRB_int_regslice;
                p_phi_reg_415 <= S_AXIS_TKEEP_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln557_reg_1132_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((icmp_ln541_reg_1073_pp6_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((icmp_ln523_reg_1018_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then
                reg_582 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_586 <= grp_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_591 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_596 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln565_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                temp_last_V_reg_1180 <= temp_last_V_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln522_reg_1007(8 downto 0) <= zext_ln522_fu_717_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln536_fu_779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    zext_ln540_reg_1062(7 downto 0) <= zext_ln540_fu_785_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln553_fu_847_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    zext_ln553_reg_1116(3 downto 0) <= zext_ln553_fu_853_p1(3 downto 0);
                    zext_ln556_reg_1121(3 downto 0) <= zext_ln556_fu_857_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln522_reg_1007(14 downto 9) <= "000000";
    zext_ln540_reg_1062(15 downto 8) <= "00000000";
    zext_ln553_reg_1116(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln556_reg_1121(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state10, icmp_ln500_fu_671_p2, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state12, icmp_ln519_fu_711_p2, ap_enable_reg_pp5_iter0, icmp_ln523_fu_727_p2, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter7, ap_CS_fsm_state45, icmp_ln536_fu_779_p2, ap_enable_reg_pp6_iter0, icmp_ln541_fu_795_p2, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter7, ap_CS_fsm_state78, icmp_ln553_fu_847_p2, ap_enable_reg_pp7_iter0, icmp_ln557_fu_867_p2, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter7, ap_enable_reg_pp8_iter0, icmp_ln565_fu_925_p2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter6, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter6, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter6, ap_block_pp8_stage0_subdone, exitcond11021_fu_609_p2, exitcond10920_fu_626_p2, exitcond10819_fu_643_p2, exitcond10718_fu_660_p2, ap_CS_fsm_state114, regslice_both_M_AXIS_V_data_V_U_apdone_blk, S_AXIS_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((exitcond11021_fu_609_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond10920_fu_626_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond10819_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((exitcond10718_fu_660_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln519_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln523_fu_727_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln523_fu_727_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state45 => 
                if (((icmp_ln536_fu_779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln541_fu_795_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln541_fu_795_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state78 => 
                if (((icmp_ln553_fu_847_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln557_fu_867_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter6 = ap_const_logic_0) and (ap_enable_reg_pp7_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter6 = ap_const_logic_0) and (ap_enable_reg_pp7_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln557_fu_867_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((icmp_ln565_fu_925_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((icmp_ln565_fu_925_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state114 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state114) and (regslice_both_M_AXIS_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    InputToLayer1Weights_address0 <= zext_ln525_fu_751_p1(15 - 1 downto 0);

    InputToLayer1Weights_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            InputToLayer1Weights_ce0 <= ap_const_logic_1;
        else 
            InputToLayer1Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer1ToLayer2Weights_address0 <= zext_ln542_fu_819_p1(16 - 1 downto 0);

    Layer1ToLayer2Weights_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
            Layer1ToLayer2Weights_ce0 <= ap_const_logic_1;
        else 
            Layer1ToLayer2Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer1_out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_CS_fsm_state44, ap_block_pp6_stage0, p_cast_fu_615_p1, zext_ln528_fu_769_p1, j_1_cast_fu_801_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            Layer1_out_address0 <= j_1_cast_fu_801_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            Layer1_out_address0 <= zext_ln528_fu_769_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Layer1_out_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer1_out_address0 <= p_cast_fu_615_p1(9 - 1 downto 0);
        else 
            Layer1_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    Layer1_out_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)))) then 
            Layer1_out_ce0 <= ap_const_logic_1;
        else 
            Layer1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer1_out_d0_assign_proc : process(reg_596, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            Layer1_out_d0 <= reg_596;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Layer1_out_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer1_out_d0 <= ap_const_lv32_0;
        else 
            Layer1_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Layer1_out_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, icmp_ln519_fu_711_p2, exitcond11021_fu_609_p2, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((icmp_ln519_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((exitcond11021_fu_609_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            Layer1_out_we0 <= ap_const_logic_1;
        else 
            Layer1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer2ToOutputWeights_address0 <= zext_ln559_1_fu_901_p1(11 - 1 downto 0);

    Layer2ToOutputWeights_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
            Layer2ToOutputWeights_ce0 <= ap_const_logic_1;
        else 
            Layer2ToOutputWeights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer2_out_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state45, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_CS_fsm_state77, ap_block_pp7_stage0, p_cast1_fu_632_p1, zext_ln545_fu_837_p1, j_2_cast_fu_873_p1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            Layer2_out_address0 <= j_2_cast_fu_873_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            Layer2_out_address0 <= zext_ln545_fu_837_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Layer2_out_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer2_out_address0 <= p_cast1_fu_632_p1(8 - 1 downto 0);
        else 
            Layer2_out_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Layer2_out_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_state45, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)))) then 
            Layer2_out_ce0 <= ap_const_logic_1;
        else 
            Layer2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer2_out_d0_assign_proc : process(reg_596, ap_CS_fsm_state4, ap_CS_fsm_state45, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            Layer2_out_d0 <= reg_596;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Layer2_out_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer2_out_d0 <= ap_const_lv32_0;
        else 
            Layer2_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Layer2_out_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state45, icmp_ln536_fu_779_p2, exitcond10920_fu_626_p2, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or ((icmp_ln536_fu_779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((exitcond10920_fu_626_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            Layer2_out_we0 <= ap_const_logic_1;
        else 
            Layer2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln565_reg_1171, ap_enable_reg_pp8_iter2, icmp_ln565_reg_1171_pp8_iter1_reg, M_AXIS_TREADY_int_regslice)
    begin
        if ((((icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln565_reg_1171 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int_regslice;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TDATA_int_regslice <= Out_layer_q0;
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_V_U_vld_out;

    M_AXIS_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, icmp_ln565_reg_1171, ap_block_pp8_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln565_reg_1171 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            M_AXIS_TVALID_int_regslice <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    Out_layer_address0_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0, ap_CS_fsm_state6, zext_ln553_reg_1116, ap_enable_reg_pp8_iter0, ap_CS_fsm_state110, p_cast2_fu_649_p1, i_4_cast_fu_931_p1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            Out_layer_address0 <= i_4_cast_fu_931_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            Out_layer_address0 <= zext_ln553_reg_1116(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Out_layer_address0 <= p_cast2_fu_649_p1(4 - 1 downto 0);
        else 
            Out_layer_address0 <= "XXXX";
        end if; 
    end process;


    Out_layer_ce0_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_CS_fsm_state6, ap_enable_reg_pp8_iter0, ap_block_pp8_stage0_11001, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)))) then 
            Out_layer_ce0 <= ap_const_logic_1;
        else 
            Out_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_layer_d0_assign_proc : process(reg_596, ap_CS_fsm_state6, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            Out_layer_d0 <= reg_596;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Out_layer_d0 <= ap_const_lv32_0;
        else 
            Out_layer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Out_layer_we0_assign_proc : process(ap_CS_fsm_state6, exitcond10819_fu_643_p2, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or ((exitcond10819_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            Out_layer_we0 <= ap_const_logic_1;
        else 
            Out_layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state10, icmp_ln500_fu_671_p2, S_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int_regslice;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_TREADY <= regslice_both_S_AXIS_V_data_V_U_ack_in;

    S_AXIS_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state10, icmp_ln500_fu_671_p2, S_AXIS_TVALID_int_regslice)
    begin
        if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) then 
            S_AXIS_TREADY_int_regslice <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln500_fu_677_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv7_1));
    add_ln523_fu_721_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_456_p4) + unsigned(ap_const_lv7_1));
    add_ln525_fu_746_p2 <= std_logic_vector(unsigned(tmp_3_fu_738_p3) + unsigned(zext_ln522_reg_1007));
    add_ln528_fu_705_p2 <= std_logic_vector(unsigned(i_1_reg_441) + unsigned(ap_const_lv9_1));
    add_ln541_fu_789_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_490_p4) + unsigned(ap_const_lv9_1));
    add_ln542_fu_814_p2 <= std_logic_vector(unsigned(tmp_4_fu_806_p3) + unsigned(zext_ln540_reg_1062));
    add_ln545_fu_773_p2 <= std_logic_vector(unsigned(i_2_reg_475) + unsigned(ap_const_lv8_1));
    add_ln553_fu_841_p2 <= std_logic_vector(unsigned(i_3_reg_509) + unsigned(ap_const_lv4_1));
    add_ln557_fu_861_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_2_phi_fu_524_p4) + unsigned(ap_const_lv8_1));
    add_ln559_1_fu_896_p2 <= std_logic_vector(unsigned(add_ln559_fu_890_p2) + unsigned(zext_ln556_reg_1121));
    add_ln559_fu_890_p2 <= std_logic_vector(unsigned(tmp_5_fu_882_p3) + unsigned(zext_ln559_fu_878_p1));
    add_ln565_fu_919_p2 <= std_logic_vector(unsigned(i_4_reg_543) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(89);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(78);
    ap_CS_fsm_state109 <= ap_CS_fsm(87);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(88);
    ap_CS_fsm_state114 <= ap_CS_fsm(90);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state28 <= ap_CS_fsm(20);
    ap_CS_fsm_state29 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(25);
    ap_CS_fsm_state34 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(35);
    ap_CS_fsm_state44 <= ap_CS_fsm(36);
    ap_CS_fsm_state45 <= ap_CS_fsm(37);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state54 <= ap_CS_fsm(39);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(46);
    ap_CS_fsm_state62 <= ap_CS_fsm(47);
    ap_CS_fsm_state66 <= ap_CS_fsm(51);
    ap_CS_fsm_state67 <= ap_CS_fsm(52);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state76 <= ap_CS_fsm(61);
    ap_CS_fsm_state77 <= ap_CS_fsm(62);
    ap_CS_fsm_state78 <= ap_CS_fsm(63);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state87 <= ap_CS_fsm(65);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state94 <= ap_CS_fsm(72);
    ap_CS_fsm_state95 <= ap_CS_fsm(73);
    ap_CS_fsm_state99 <= ap_CS_fsm(77);
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_01001_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln565_reg_1171, ap_enable_reg_pp8_iter2, icmp_ln565_reg_1171_pp8_iter1_reg, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_pp8_stage0_01001 <= (((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln565_reg_1171, ap_enable_reg_pp8_iter2, icmp_ln565_reg_1171_pp8_iter1_reg, ap_block_state112_io, ap_block_state113_io, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_pp8_stage0_11001 <= (((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state113_io) or ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state112_io) or ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171 = ap_const_lv1_0)))));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln565_reg_1171, ap_enable_reg_pp8_iter2, icmp_ln565_reg_1171_pp8_iter1_reg, ap_block_state112_io, ap_block_state113_io, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_pp8_stage0_subdone <= (((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state113_io) or ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state112_io) or ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171 = ap_const_lv1_0)))));
    end process;


    ap_block_state10_assign_proc : process(icmp_ln500_fu_671_p2, S_AXIS_TVALID_int_regslice)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0));
    end process;

        ap_block_state111_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state112_io_assign_proc : process(icmp_ln565_reg_1171, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_state112_io <= ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171 = ap_const_lv1_0));
    end process;


    ap_block_state112_pp8_stage0_iter1_assign_proc : process(icmp_ln565_reg_1171, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_state112_pp8_stage0_iter1 <= ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171 = ap_const_lv1_0));
    end process;


    ap_block_state113_io_assign_proc : process(icmp_ln565_reg_1171_pp8_iter1_reg, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_state113_io <= ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state113_pp8_stage0_iter2_assign_proc : process(icmp_ln565_reg_1171_pp8_iter1_reg, M_AXIS_TREADY_int_regslice)
    begin
                ap_block_state113_pp8_stage0_iter2 <= ((ap_const_logic_0 = M_AXIS_TREADY_int_regslice) and (icmp_ln565_reg_1171_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state13_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp6_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp6_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp7_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp7_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp7_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp5_exit_iter0_state13_assign_proc : process(icmp_ln523_fu_727_p2)
    begin
        if ((icmp_ln523_fu_727_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state46_assign_proc : process(icmp_ln541_fu_795_p2)
    begin
        if ((icmp_ln541_fu_795_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state46 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state79_assign_proc : process(icmp_ln557_fu_867_p2)
    begin
        if ((icmp_ln557_fu_867_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state79 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state111_assign_proc : process(icmp_ln565_fu_925_p2)
    begin
        if ((icmp_ln565_fu_925_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state111 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state111 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6)
    begin
        if (((ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter7, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter6)
    begin
        if (((ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter7, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter5, ap_enable_reg_pp7_iter6)
    begin
        if (((ap_enable_reg_pp7_iter6 = ap_const_logic_0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter7 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_490_p4_assign_proc : process(j_1_reg_486, icmp_ln541_reg_1073, add_ln541_reg_1067, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln541_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ap_phi_mux_j_1_phi_fu_490_p4 <= add_ln541_reg_1067;
        else 
            ap_phi_mux_j_1_phi_fu_490_p4 <= j_1_reg_486;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_524_p4_assign_proc : process(j_2_reg_520, icmp_ln557_reg_1132, add_ln557_reg_1126, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln557_reg_1132 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            ap_phi_mux_j_2_phi_fu_524_p4 <= add_ln557_reg_1126;
        else 
            ap_phi_mux_j_2_phi_fu_524_p4 <= j_2_reg_520;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_456_p4_assign_proc : process(j_reg_452, icmp_ln523_reg_1018, add_ln523_reg_1012, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln523_reg_1018 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_j_phi_fu_456_p4 <= add_ln523_reg_1012;
        else 
            ap_phi_mux_j_phi_fu_456_p4 <= j_reg_452;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln504_fu_700_p1 <= S_AXIS_TDATA_int_regslice;
    empty_15_fu_603_p2 <= std_logic_vector(unsigned(empty_reg_360) + unsigned(ap_const_lv9_1));
    empty_18_fu_620_p2 <= std_logic_vector(unsigned(empty_17_reg_371) + unsigned(ap_const_lv8_1));
    empty_21_fu_637_p2 <= std_logic_vector(unsigned(empty_20_reg_382) + unsigned(ap_const_lv4_1));
    empty_24_fu_654_p2 <= std_logic_vector(unsigned(empty_23_reg_393) + unsigned(ap_const_lv7_1));
    exitcond10718_fu_660_p2 <= "1" when (empty_23_reg_393 = ap_const_lv7_49) else "0";
    exitcond10819_fu_643_p2 <= "1" when (empty_20_reg_382 = ap_const_lv4_A) else "0";
    exitcond10920_fu_626_p2 <= "1" when (empty_17_reg_371 = ap_const_lv8_81) else "0";
    exitcond11021_fu_609_p2 <= "1" when (empty_reg_360 = ap_const_lv9_101) else "0";

    grp_fu_559_p0_assign_proc : process(InputToLayer1Weights_q0, Layer1ToLayer2Weights_q0, Layer2ToOutputWeights_q0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_fu_559_p0 <= Layer2ToOutputWeights_q0;
        elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_559_p0 <= Layer1ToLayer2Weights_q0;
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_559_p0 <= InputToLayer1Weights_q0;
        else 
            grp_fu_559_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_559_p1_assign_proc : process(ap_CS_fsm_pp5_stage0, incoming_inputs_q0, ap_enable_reg_pp5_iter1, ap_CS_fsm_pp6_stage0, Layer1_out_q0, ap_enable_reg_pp6_iter1, ap_CS_fsm_pp7_stage0, Layer2_out_q0, ap_enable_reg_pp7_iter1, ap_block_pp5_stage0, ap_block_pp6_stage0, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_fu_559_p1 <= Layer2_out_q0;
        elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_559_p1 <= Layer1_out_q0;
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_559_p1 <= incoming_inputs_q0;
        else 
            grp_fu_559_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_574_p1_assign_proc : process(sum_reg_463, sum_2_reg_497, sum_4_reg_531, ap_CS_fsm_state21, ap_CS_fsm_state54, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_574_p1 <= sum_4_reg_531;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_574_p1 <= sum_2_reg_497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_574_p1 <= sum_reg_463;
        else 
            grp_fu_574_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_761_in_valid_assign_proc : process(icmp_ln523_reg_1018_pp5_iter4_reg, ap_enable_reg_pp5_iter5, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter5 = ap_const_logic_1) and (icmp_ln523_reg_1018_pp5_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_761_in_valid <= ap_const_logic_1;
        else 
            grp_fu_761_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_761_p2 <= "1" when (add_ln523_reg_1012_pp5_iter4_reg = ap_const_lv7_49) else "0";

    grp_fu_829_in_valid_assign_proc : process(icmp_ln541_reg_1073_pp6_iter4_reg, ap_enable_reg_pp6_iter5, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (icmp_ln541_reg_1073_pp6_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_829_in_valid <= ap_const_logic_1;
        else 
            grp_fu_829_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_829_p2 <= "1" when (add_ln541_reg_1067_pp6_iter4_reg = ap_const_lv9_101) else "0";

    grp_fu_911_in_valid_assign_proc : process(icmp_ln557_reg_1132_pp7_iter4_reg, ap_enable_reg_pp7_iter5, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (icmp_ln557_reg_1132_pp7_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            grp_fu_911_in_valid <= ap_const_logic_1;
        else 
            grp_fu_911_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_911_p2 <= "1" when (add_ln557_reg_1126_pp7_iter4_reg = ap_const_lv8_81) else "0";
    i_4_cast_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_543),64));
    i_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_404),64));
    icmp_ln500_fu_671_p2 <= "1" when (i_reg_404 = ap_const_lv7_49) else "0";
    icmp_ln519_fu_711_p2 <= "1" when (i_1_reg_441 = ap_const_lv9_100) else "0";
    icmp_ln523_fu_727_p2 <= "1" when (ap_phi_mux_j_phi_fu_456_p4 = ap_const_lv7_49) else "0";
    icmp_ln536_fu_779_p2 <= "1" when (i_2_reg_475 = ap_const_lv8_80) else "0";
    icmp_ln541_fu_795_p2 <= "1" when (ap_phi_mux_j_1_phi_fu_490_p4 = ap_const_lv9_101) else "0";
    icmp_ln553_fu_847_p2 <= "1" when (i_3_reg_509 = ap_const_lv4_9) else "0";
    icmp_ln557_fu_867_p2 <= "1" when (ap_phi_mux_j_2_phi_fu_524_p4 = ap_const_lv8_81) else "0";
    icmp_ln565_fu_925_p2 <= "1" when (i_4_reg_543 = ap_const_lv4_9) else "0";

    incoming_inputs_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_CS_fsm_state11, ap_block_pp5_stage0, p_cast3_fu_666_p1, i_cast_fu_683_p1, j_cast_fu_733_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            incoming_inputs_address0 <= j_cast_fu_733_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            incoming_inputs_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            incoming_inputs_address0 <= i_cast_fu_683_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            incoming_inputs_address0 <= p_cast3_fu_666_p1(7 - 1 downto 0);
        else 
            incoming_inputs_address0 <= "XXXXXXX";
        end if; 
    end process;


    incoming_inputs_ce0_assign_proc : process(ap_CS_fsm_state10, icmp_ln500_fu_671_p2, ap_block_pp5_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_CS_fsm_state11, S_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or (not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            incoming_inputs_ce0 <= ap_const_logic_1;
        else 
            incoming_inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    incoming_inputs_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, bitcast_ln504_fu_700_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            incoming_inputs_d0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            incoming_inputs_d0 <= bitcast_ln504_fu_700_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            incoming_inputs_d0 <= ap_const_lv32_0;
        else 
            incoming_inputs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    incoming_inputs_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln500_fu_671_p2, ap_CS_fsm_state8, exitcond10718_fu_660_p2, ap_CS_fsm_state11, S_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((exitcond10718_fu_660_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = S_AXIS_TVALID_int_regslice) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln500_fu_671_p2 = ap_const_lv1_0)))) then 
            incoming_inputs_we0 <= ap_const_logic_1;
        else 
            incoming_inputs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_490_p4),64));
    j_2_cast_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_524_p4),64));
    j_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_456_p4),64));
    p_cast1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_17_reg_371),64));
    p_cast2_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_reg_382),64));
    p_cast3_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_23_reg_393),64));
    p_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_360),64));
    temp_last_V_fu_936_p2 <= "1" when (i_4_reg_543 = ap_const_lv4_8) else "0";
    tmp_3_fu_738_p3 <= (ap_phi_mux_j_phi_fu_456_p4 & ap_const_lv8_0);
    tmp_4_fu_806_p3 <= (ap_phi_mux_j_1_phi_fu_490_p4 & ap_const_lv7_0);
    tmp_5_fu_882_p3 <= (ap_phi_mux_j_2_phi_fu_524_p4 & ap_const_lv3_0);
    zext_ln522_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_441),15));
    zext_ln525_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln525_fu_746_p2),64));
    zext_ln528_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln528_reg_997),64));
    zext_ln540_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_475),16));
    zext_ln542_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_fu_814_p2),64));
    zext_ln545_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_reg_1052),64));
    zext_ln553_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_509),64));
    zext_ln556_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_509),11));
    zext_ln559_1_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln559_1_fu_896_p2),64));
    zext_ln559_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_524_p4),11));
end behav;
