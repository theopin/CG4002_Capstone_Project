// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp_sigmoid_mlp_sigmoid,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.708000,HLS_SYN_LAT=65887,HLS_SYN_TPT=none,HLS_SYN_MEM=105,HLS_SYN_DSP=0,HLS_SYN_FF=2041,HLS_SYN_LUT=5330,HLS_VERSION=2020_2}" *)

module mlp_sigmoid (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TKEEP,
        S_AXIS_TSTRB,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 91'd1;
parameter    ap_ST_fsm_state2 = 91'd2;
parameter    ap_ST_fsm_state3 = 91'd4;
parameter    ap_ST_fsm_state4 = 91'd8;
parameter    ap_ST_fsm_state5 = 91'd16;
parameter    ap_ST_fsm_state6 = 91'd32;
parameter    ap_ST_fsm_state7 = 91'd64;
parameter    ap_ST_fsm_state8 = 91'd128;
parameter    ap_ST_fsm_state9 = 91'd256;
parameter    ap_ST_fsm_state10 = 91'd512;
parameter    ap_ST_fsm_state11 = 91'd1024;
parameter    ap_ST_fsm_state12 = 91'd2048;
parameter    ap_ST_fsm_pp5_stage0 = 91'd4096;
parameter    ap_ST_fsm_state21 = 91'd8192;
parameter    ap_ST_fsm_state22 = 91'd16384;
parameter    ap_ST_fsm_state23 = 91'd32768;
parameter    ap_ST_fsm_state24 = 91'd65536;
parameter    ap_ST_fsm_state25 = 91'd131072;
parameter    ap_ST_fsm_state26 = 91'd262144;
parameter    ap_ST_fsm_state27 = 91'd524288;
parameter    ap_ST_fsm_state28 = 91'd1048576;
parameter    ap_ST_fsm_state29 = 91'd2097152;
parameter    ap_ST_fsm_state30 = 91'd4194304;
parameter    ap_ST_fsm_state31 = 91'd8388608;
parameter    ap_ST_fsm_state32 = 91'd16777216;
parameter    ap_ST_fsm_state33 = 91'd33554432;
parameter    ap_ST_fsm_state34 = 91'd67108864;
parameter    ap_ST_fsm_state35 = 91'd134217728;
parameter    ap_ST_fsm_state36 = 91'd268435456;
parameter    ap_ST_fsm_state37 = 91'd536870912;
parameter    ap_ST_fsm_state38 = 91'd1073741824;
parameter    ap_ST_fsm_state39 = 91'd2147483648;
parameter    ap_ST_fsm_state40 = 91'd4294967296;
parameter    ap_ST_fsm_state41 = 91'd8589934592;
parameter    ap_ST_fsm_state42 = 91'd17179869184;
parameter    ap_ST_fsm_state43 = 91'd34359738368;
parameter    ap_ST_fsm_state44 = 91'd68719476736;
parameter    ap_ST_fsm_state45 = 91'd137438953472;
parameter    ap_ST_fsm_pp6_stage0 = 91'd274877906944;
parameter    ap_ST_fsm_state54 = 91'd549755813888;
parameter    ap_ST_fsm_state55 = 91'd1099511627776;
parameter    ap_ST_fsm_state56 = 91'd2199023255552;
parameter    ap_ST_fsm_state57 = 91'd4398046511104;
parameter    ap_ST_fsm_state58 = 91'd8796093022208;
parameter    ap_ST_fsm_state59 = 91'd17592186044416;
parameter    ap_ST_fsm_state60 = 91'd35184372088832;
parameter    ap_ST_fsm_state61 = 91'd70368744177664;
parameter    ap_ST_fsm_state62 = 91'd140737488355328;
parameter    ap_ST_fsm_state63 = 91'd281474976710656;
parameter    ap_ST_fsm_state64 = 91'd562949953421312;
parameter    ap_ST_fsm_state65 = 91'd1125899906842624;
parameter    ap_ST_fsm_state66 = 91'd2251799813685248;
parameter    ap_ST_fsm_state67 = 91'd4503599627370496;
parameter    ap_ST_fsm_state68 = 91'd9007199254740992;
parameter    ap_ST_fsm_state69 = 91'd18014398509481984;
parameter    ap_ST_fsm_state70 = 91'd36028797018963968;
parameter    ap_ST_fsm_state71 = 91'd72057594037927936;
parameter    ap_ST_fsm_state72 = 91'd144115188075855872;
parameter    ap_ST_fsm_state73 = 91'd288230376151711744;
parameter    ap_ST_fsm_state74 = 91'd576460752303423488;
parameter    ap_ST_fsm_state75 = 91'd1152921504606846976;
parameter    ap_ST_fsm_state76 = 91'd2305843009213693952;
parameter    ap_ST_fsm_state77 = 91'd4611686018427387904;
parameter    ap_ST_fsm_state78 = 91'd9223372036854775808;
parameter    ap_ST_fsm_pp7_stage0 = 91'd18446744073709551616;
parameter    ap_ST_fsm_state87 = 91'd36893488147419103232;
parameter    ap_ST_fsm_state88 = 91'd73786976294838206464;
parameter    ap_ST_fsm_state89 = 91'd147573952589676412928;
parameter    ap_ST_fsm_state90 = 91'd295147905179352825856;
parameter    ap_ST_fsm_state91 = 91'd590295810358705651712;
parameter    ap_ST_fsm_state92 = 91'd1180591620717411303424;
parameter    ap_ST_fsm_state93 = 91'd2361183241434822606848;
parameter    ap_ST_fsm_state94 = 91'd4722366482869645213696;
parameter    ap_ST_fsm_state95 = 91'd9444732965739290427392;
parameter    ap_ST_fsm_state96 = 91'd18889465931478580854784;
parameter    ap_ST_fsm_state97 = 91'd37778931862957161709568;
parameter    ap_ST_fsm_state98 = 91'd75557863725914323419136;
parameter    ap_ST_fsm_state99 = 91'd151115727451828646838272;
parameter    ap_ST_fsm_state100 = 91'd302231454903657293676544;
parameter    ap_ST_fsm_state101 = 91'd604462909807314587353088;
parameter    ap_ST_fsm_state102 = 91'd1208925819614629174706176;
parameter    ap_ST_fsm_state103 = 91'd2417851639229258349412352;
parameter    ap_ST_fsm_state104 = 91'd4835703278458516698824704;
parameter    ap_ST_fsm_state105 = 91'd9671406556917033397649408;
parameter    ap_ST_fsm_state106 = 91'd19342813113834066795298816;
parameter    ap_ST_fsm_state107 = 91'd38685626227668133590597632;
parameter    ap_ST_fsm_state108 = 91'd77371252455336267181195264;
parameter    ap_ST_fsm_state109 = 91'd154742504910672534362390528;
parameter    ap_ST_fsm_state110 = 91'd309485009821345068724781056;
parameter    ap_ST_fsm_pp8_stage0 = 91'd618970019642690137449562112;
parameter    ap_ST_fsm_state114 = 91'd1237940039285380274899124224;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input  [3:0] S_AXIS_TKEEP;
input  [3:0] S_AXIS_TSTRB;
input  [0:0] S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TLAST;

 reg    ap_rst_n_inv;
wire   [14:0] InputToLayer1Weights_address0;
reg    InputToLayer1Weights_ce0;
wire   [31:0] InputToLayer1Weights_q0;
wire   [15:0] Layer1ToLayer2Weights_address0;
reg    Layer1ToLayer2Weights_ce0;
wire   [31:0] Layer1ToLayer2Weights_q0;
wire   [10:0] Layer2ToOutputWeights_address0;
reg    Layer2ToOutputWeights_ce0;
wire   [31:0] Layer2ToOutputWeights_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [90:0] ap_CS_fsm;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln500_fu_671_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln565_reg_1171;
reg    ap_enable_reg_pp8_iter2;
reg   [0:0] icmp_ln565_reg_1171_pp8_iter1_reg;
reg   [6:0] j_reg_452;
reg   [31:0] sum_reg_463;
reg   [8:0] j_1_reg_486;
reg   [31:0] sum_2_reg_497;
reg   [7:0] j_2_reg_520;
reg   [31:0] sum_4_reg_531;
reg   [3:0] i_4_reg_543;
wire   [31:0] grp_fu_559_p2;
reg   [31:0] reg_582;
reg    ap_enable_reg_pp5_iter4;
wire    ap_block_state13_pp5_stage0_iter0;
wire    ap_block_state14_pp5_stage0_iter1;
wire    ap_block_state15_pp5_stage0_iter2;
wire    ap_block_state16_pp5_stage0_iter3;
wire    ap_block_state17_pp5_stage0_iter4;
wire    ap_block_state18_pp5_stage0_iter5;
wire    ap_block_state19_pp5_stage0_iter6;
wire    ap_block_state20_pp5_stage0_iter7;
wire    ap_block_pp5_stage0_11001;
reg   [0:0] icmp_ln523_reg_1018;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter3_reg;
wire    ap_block_state46_pp6_stage0_iter0;
wire    ap_block_state47_pp6_stage0_iter1;
wire    ap_block_state48_pp6_stage0_iter2;
wire    ap_block_state49_pp6_stage0_iter3;
wire    ap_block_state50_pp6_stage0_iter4;
wire    ap_block_state51_pp6_stage0_iter5;
wire    ap_block_state52_pp6_stage0_iter6;
wire    ap_block_state53_pp6_stage0_iter7;
wire    ap_block_pp6_stage0_11001;
wire    ap_block_state79_pp7_stage0_iter0;
wire    ap_block_state80_pp7_stage0_iter1;
wire    ap_block_state81_pp7_stage0_iter2;
wire    ap_block_state82_pp7_stage0_iter3;
wire    ap_block_state83_pp7_stage0_iter4;
wire    ap_block_state84_pp7_stage0_iter5;
wire    ap_block_state85_pp7_stage0_iter6;
wire    ap_block_state86_pp7_stage0_iter7;
wire    ap_block_pp7_stage0_11001;
reg    ap_enable_reg_pp6_iter4;
reg   [0:0] icmp_ln541_reg_1073;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter3_reg;
reg    ap_enable_reg_pp7_iter4;
reg   [0:0] icmp_ln557_reg_1132;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter3_reg;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] reg_586;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state94;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] reg_591;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state99;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] reg_596;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state109;
wire   [8:0] empty_15_fu_603_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] empty_18_fu_620_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] empty_21_fu_637_p2;
wire    ap_CS_fsm_state6;
wire   [6:0] empty_24_fu_654_p2;
wire    ap_CS_fsm_state8;
wire   [6:0] add_ln500_fu_677_p2;
reg    ap_block_state10;
wire   [8:0] add_ln528_fu_705_p2;
reg   [8:0] add_ln528_reg_997;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln519_fu_711_p2;
wire   [14:0] zext_ln522_fu_717_p1;
reg   [14:0] zext_ln522_reg_1007;
wire   [6:0] add_ln523_fu_721_p2;
reg   [6:0] add_ln523_reg_1012;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
reg   [6:0] add_ln523_reg_1012_pp5_iter1_reg;
reg   [6:0] add_ln523_reg_1012_pp5_iter2_reg;
reg   [6:0] add_ln523_reg_1012_pp5_iter3_reg;
reg   [6:0] add_ln523_reg_1012_pp5_iter4_reg;
wire   [0:0] icmp_ln523_fu_727_p2;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter1_reg;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter2_reg;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter4_reg;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter5_reg;
reg   [0:0] icmp_ln523_reg_1018_pp5_iter6_reg;
wire   [31:0] incoming_inputs_q0;
reg    ap_enable_reg_pp5_iter1;
wire   [31:0] grp_fu_761_p3;
reg    ap_enable_reg_pp5_iter7;
wire   [7:0] add_ln545_fu_773_p2;
reg   [7:0] add_ln545_reg_1052;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln536_fu_779_p2;
wire   [15:0] zext_ln540_fu_785_p1;
reg   [15:0] zext_ln540_reg_1062;
wire   [8:0] add_ln541_fu_789_p2;
reg   [8:0] add_ln541_reg_1067;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
reg   [8:0] add_ln541_reg_1067_pp6_iter1_reg;
reg   [8:0] add_ln541_reg_1067_pp6_iter2_reg;
reg   [8:0] add_ln541_reg_1067_pp6_iter3_reg;
reg   [8:0] add_ln541_reg_1067_pp6_iter4_reg;
wire   [0:0] icmp_ln541_fu_795_p2;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter1_reg;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter2_reg;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter4_reg;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter5_reg;
reg   [0:0] icmp_ln541_reg_1073_pp6_iter6_reg;
wire   [31:0] Layer1_out_q0;
reg    ap_enable_reg_pp6_iter1;
wire   [31:0] grp_fu_829_p3;
reg    ap_enable_reg_pp6_iter7;
wire   [3:0] add_ln553_fu_841_p2;
reg   [3:0] add_ln553_reg_1107;
wire    ap_CS_fsm_state78;
wire   [0:0] icmp_ln553_fu_847_p2;
wire   [63:0] zext_ln553_fu_853_p1;
reg   [63:0] zext_ln553_reg_1116;
wire   [10:0] zext_ln556_fu_857_p1;
reg   [10:0] zext_ln556_reg_1121;
wire   [7:0] add_ln557_fu_861_p2;
reg   [7:0] add_ln557_reg_1126;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
reg   [7:0] add_ln557_reg_1126_pp7_iter1_reg;
reg   [7:0] add_ln557_reg_1126_pp7_iter2_reg;
reg   [7:0] add_ln557_reg_1126_pp7_iter3_reg;
reg   [7:0] add_ln557_reg_1126_pp7_iter4_reg;
wire   [0:0] icmp_ln557_fu_867_p2;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter1_reg;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter2_reg;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter4_reg;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter5_reg;
reg   [0:0] icmp_ln557_reg_1132_pp7_iter6_reg;
wire   [31:0] Layer2_out_q0;
reg    ap_enable_reg_pp7_iter1;
wire   [31:0] grp_fu_911_p3;
reg    ap_enable_reg_pp7_iter7;
wire   [3:0] add_ln565_fu_919_p2;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state111_pp8_stage0_iter0;
reg    ap_block_state112_pp8_stage0_iter1;
reg    ap_block_state112_io;
reg    ap_block_state113_pp8_stage0_iter2;
reg    ap_block_state113_io;
reg    ap_block_pp8_stage0_11001;
wire   [0:0] icmp_ln565_fu_925_p2;
wire   [0:0] temp_last_V_fu_936_p2;
reg   [0:0] temp_last_V_reg_1180;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state13;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter5;
reg    ap_enable_reg_pp5_iter6;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state46;
reg    ap_enable_reg_pp6_iter2;
reg    ap_enable_reg_pp6_iter3;
reg    ap_enable_reg_pp6_iter5;
reg    ap_enable_reg_pp6_iter6;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state79;
reg    ap_enable_reg_pp7_iter2;
reg    ap_enable_reg_pp7_iter3;
reg    ap_enable_reg_pp7_iter5;
reg    ap_enable_reg_pp7_iter6;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state111;
reg   [8:0] Layer1_out_address0;
reg    Layer1_out_ce0;
reg    Layer1_out_we0;
reg   [31:0] Layer1_out_d0;
reg   [7:0] Layer2_out_address0;
reg    Layer2_out_ce0;
reg    Layer2_out_we0;
reg   [31:0] Layer2_out_d0;
reg   [3:0] Out_layer_address0;
reg    Out_layer_ce0;
reg    Out_layer_we0;
reg   [31:0] Out_layer_d0;
wire   [31:0] Out_layer_q0;
reg   [6:0] incoming_inputs_address0;
reg    incoming_inputs_ce0;
reg    incoming_inputs_we0;
reg   [31:0] incoming_inputs_d0;
reg   [8:0] empty_reg_360;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond11021_fu_609_p2;
reg   [7:0] empty_17_reg_371;
wire   [0:0] exitcond10920_fu_626_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] empty_20_reg_382;
wire   [0:0] exitcond10819_fu_643_p2;
wire    ap_CS_fsm_state5;
reg   [6:0] empty_23_reg_393;
wire   [0:0] exitcond10718_fu_660_p2;
wire    ap_CS_fsm_state7;
reg   [6:0] i_reg_404;
wire    ap_CS_fsm_state9;
reg   [3:0] p_phi_reg_415;
reg   [3:0] p_phi17_reg_428;
reg   [8:0] i_1_reg_441;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state11;
reg   [6:0] ap_phi_mux_j_phi_fu_456_p4;
wire    ap_block_pp5_stage0;
reg   [7:0] i_2_reg_475;
wire    ap_CS_fsm_state77;
reg   [8:0] ap_phi_mux_j_1_phi_fu_490_p4;
wire    ap_block_pp6_stage0;
reg   [3:0] i_3_reg_509;
wire    ap_CS_fsm_state110;
reg   [7:0] ap_phi_mux_j_2_phi_fu_524_p4;
wire    ap_block_pp7_stage0;
wire   [63:0] p_cast_fu_615_p1;
wire   [63:0] p_cast1_fu_632_p1;
wire   [63:0] p_cast2_fu_649_p1;
wire   [63:0] p_cast3_fu_666_p1;
wire   [63:0] i_cast_fu_683_p1;
wire   [63:0] zext_ln525_fu_751_p1;
wire   [63:0] j_cast_fu_733_p1;
wire   [63:0] zext_ln528_fu_769_p1;
wire   [63:0] zext_ln542_fu_819_p1;
wire   [63:0] j_1_cast_fu_801_p1;
wire   [63:0] zext_ln545_fu_837_p1;
wire   [63:0] zext_ln559_1_fu_901_p1;
wire   [63:0] j_2_cast_fu_873_p1;
wire   [63:0] i_4_cast_fu_931_p1;
reg    ap_block_pp8_stage0_01001;
wire   [31:0] bitcast_ln504_fu_700_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state95;
reg   [31:0] grp_fu_559_p0;
reg   [31:0] grp_fu_559_p1;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state100;
reg   [31:0] grp_fu_574_p1;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state87;
wire   [14:0] tmp_3_fu_738_p3;
wire   [14:0] add_ln525_fu_746_p2;
wire   [0:0] grp_fu_761_p2;
wire   [15:0] tmp_4_fu_806_p3;
wire   [15:0] add_ln542_fu_814_p2;
wire   [0:0] grp_fu_829_p2;
wire   [10:0] tmp_5_fu_882_p3;
wire   [10:0] zext_ln559_fu_878_p1;
wire   [10:0] add_ln559_fu_890_p2;
wire   [10:0] add_ln559_1_fu_896_p2;
wire   [0:0] grp_fu_911_p2;
reg    grp_fu_761_in_valid;
reg    grp_fu_829_in_valid;
reg    grp_fu_911_in_valid;
reg   [90:0] ap_NS_fsm;
wire    ap_CS_fsm_state114;
wire    regslice_both_M_AXIS_V_data_V_U_apdone_blk;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
wire    regslice_both_S_AXIS_V_data_V_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int_regslice;
wire    S_AXIS_TVALID_int_regslice;
reg    S_AXIS_TREADY_int_regslice;
wire    regslice_both_S_AXIS_V_data_V_U_ack_in;
wire    regslice_both_S_AXIS_V_keep_V_U_apdone_blk;
wire   [3:0] S_AXIS_TKEEP_int_regslice;
wire    regslice_both_S_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_S_AXIS_V_keep_V_U_ack_in;
wire    regslice_both_S_AXIS_V_strb_V_U_apdone_blk;
wire   [3:0] S_AXIS_TSTRB_int_regslice;
wire    regslice_both_S_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_S_AXIS_V_strb_V_U_ack_in;
wire    regslice_both_S_AXIS_V_last_V_U_apdone_blk;
wire   [0:0] S_AXIS_TLAST_int_regslice;
wire    regslice_both_S_AXIS_V_last_V_U_vld_out;
wire    regslice_both_S_AXIS_V_last_V_U_ack_in;
wire   [31:0] M_AXIS_TDATA_int_regslice;
reg    M_AXIS_TVALID_int_regslice;
wire    M_AXIS_TREADY_int_regslice;
wire    regslice_both_M_AXIS_V_data_V_U_vld_out;
wire    regslice_both_M_AXIS_V_keep_V_U_apdone_blk;
wire    regslice_both_M_AXIS_V_keep_V_U_ack_in_dummy;
wire    regslice_both_M_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_M_AXIS_V_strb_V_U_apdone_blk;
wire    regslice_both_M_AXIS_V_strb_V_U_ack_in_dummy;
wire    regslice_both_M_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_M_AXIS_V_last_V_U_apdone_blk;
wire    regslice_both_M_AXIS_V_last_V_U_ack_in_dummy;
wire    regslice_both_M_AXIS_V_last_V_U_vld_out;
wire   [31:0] grp_fu_761_p0;
wire   [31:0] grp_fu_829_p0;
wire   [31:0] grp_fu_911_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 91'd1;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp6_iter4 = 1'b0;
#0 ap_enable_reg_pp7_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter7 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter7 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter7 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter3 = 1'b0;
#0 ap_enable_reg_pp6_iter5 = 1'b0;
#0 ap_enable_reg_pp6_iter6 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter3 = 1'b0;
#0 ap_enable_reg_pp7_iter5 = 1'b0;
#0 ap_enable_reg_pp7_iter6 = 1'b0;
end

mlp_sigmoid_InputToLayer1Weights #(
    .DataWidth( 32 ),
    .AddressRange( 18688 ),
    .AddressWidth( 15 ))
InputToLayer1Weights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(InputToLayer1Weights_address0),
    .ce0(InputToLayer1Weights_ce0),
    .q0(InputToLayer1Weights_q0)
);

mlp_sigmoid_Layer1ToLayer2Weights #(
    .DataWidth( 32 ),
    .AddressRange( 32896 ),
    .AddressWidth( 16 ))
Layer1ToLayer2Weights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Layer1ToLayer2Weights_address0),
    .ce0(Layer1ToLayer2Weights_ce0),
    .q0(Layer1ToLayer2Weights_q0)
);

mlp_sigmoid_Layer2ToOutputWeights #(
    .DataWidth( 32 ),
    .AddressRange( 1161 ),
    .AddressWidth( 11 ))
Layer2ToOutputWeights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Layer2ToOutputWeights_address0),
    .ce0(Layer2ToOutputWeights_ce0),
    .q0(Layer2ToOutputWeights_q0)
);

mlp_sigmoid_Layer1_out #(
    .DataWidth( 32 ),
    .AddressRange( 257 ),
    .AddressWidth( 9 ))
Layer1_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Layer1_out_address0),
    .ce0(Layer1_out_ce0),
    .we0(Layer1_out_we0),
    .d0(Layer1_out_d0),
    .q0(Layer1_out_q0)
);

mlp_sigmoid_Layer2_out #(
    .DataWidth( 32 ),
    .AddressRange( 129 ),
    .AddressWidth( 8 ))
Layer2_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Layer2_out_address0),
    .ce0(Layer2_out_ce0),
    .we0(Layer2_out_we0),
    .d0(Layer2_out_d0),
    .q0(Layer2_out_q0)
);

mlp_sigmoid_Out_layer #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
Out_layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Out_layer_address0),
    .ce0(Out_layer_ce0),
    .we0(Out_layer_we0),
    .d0(Out_layer_d0),
    .q0(Out_layer_q0)
);

mlp_sigmoid_incoming_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 73 ),
    .AddressWidth( 7 ))
incoming_inputs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(incoming_inputs_address0),
    .ce0(incoming_inputs_ce0),
    .we0(incoming_inputs_we0),
    .d0(incoming_inputs_d0),
    .q0(incoming_inputs_q0)
);

mlp_sigmoid_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_586),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

mlp_sigmoid_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_559_p0),
    .din1(grp_fu_559_p1),
    .ce(1'b1),
    .dout(grp_fu_559_p2)
);

mlp_sigmoid_fdiv_32ns_32ns_32_10_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_10_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_591),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

mlp_sigmoid_fexp_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_8_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_574_p1),
    .ce(1'b1),
    .dout(grp_fu_574_p2)
);

mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_582),
    .in_last(grp_fu_761_p2),
    .in_valid(grp_fu_761_in_valid),
    .out_data(grp_fu_761_p3)
);

mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_582),
    .in_last(grp_fu_829_p2),
    .in_valid(grp_fu_829_in_valid),
    .out_data(grp_fu_829_p3)
);

mlp_sigmoid_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(reg_582),
    .in_last(grp_fu_911_p2),
    .in_valid(grp_fu_911_in_valid),
    .out_data(grp_fu_911_p3)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_V_U_ack_in),
    .data_out(S_AXIS_TDATA_int_regslice),
    .vld_out(S_AXIS_TVALID_int_regslice),
    .ack_out(S_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_S_AXIS_V_data_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 4 ))
regslice_both_S_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TKEEP),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_keep_V_U_ack_in),
    .data_out(S_AXIS_TKEEP_int_regslice),
    .vld_out(regslice_both_S_AXIS_V_keep_V_U_vld_out),
    .ack_out(S_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_S_AXIS_V_keep_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 4 ))
regslice_both_S_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TSTRB),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_strb_V_U_ack_in),
    .data_out(S_AXIS_TSTRB_int_regslice),
    .vld_out(regslice_both_S_AXIS_V_strb_V_U_vld_out),
    .ack_out(S_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_S_AXIS_V_strb_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 1 ))
regslice_both_S_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_last_V_U_ack_in),
    .data_out(S_AXIS_TLAST_int_regslice),
    .vld_out(regslice_both_S_AXIS_V_last_V_U_vld_out),
    .ack_out(S_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_S_AXIS_V_last_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TDATA_int_regslice),
    .vld_in(M_AXIS_TVALID_int_regslice),
    .ack_in(M_AXIS_TREADY_int_regslice),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_V_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 4 ))
regslice_both_M_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi_reg_415),
    .vld_in(M_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_M_AXIS_V_keep_V_U_ack_in_dummy),
    .data_out(M_AXIS_TKEEP),
    .vld_out(regslice_both_M_AXIS_V_keep_V_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_keep_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 4 ))
regslice_both_M_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_phi17_reg_428),
    .vld_in(M_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_M_AXIS_V_strb_V_U_ack_in_dummy),
    .data_out(M_AXIS_TSTRB),
    .vld_out(regslice_both_M_AXIS_V_strb_V_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_strb_V_U_apdone_blk)
);

mlp_sigmoid_regslice_both #(
    .DataWidth( 1 ))
regslice_both_M_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(temp_last_V_reg_1180),
    .vld_in(M_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_M_AXIS_V_last_V_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_M_AXIS_V_last_V_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((icmp_ln519_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state13)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
        end else if (((icmp_ln519_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp5_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp6_exit_iter0_state46) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((icmp_ln536_fu_779_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state46)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state46);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
        end else if (((icmp_ln536_fu_779_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp6_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp7_exit_iter0_state79) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if (((icmp_ln553_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state79)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state79);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter6 <= ap_enable_reg_pp7_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter7 <= ap_enable_reg_pp7_iter6;
        end else if (((icmp_ln553_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp7_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp8_exit_iter0_state111) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((icmp_ln553_fu_847_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state111)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state111);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if (((icmp_ln553_fu_847_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_17_reg_371 <= 8'd0;
    end else if (((exitcond10920_fu_626_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_17_reg_371 <= empty_18_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_20_reg_382 <= 4'd0;
    end else if (((exitcond10819_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        empty_20_reg_382 <= empty_21_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_23_reg_393 <= 7'd0;
    end else if (((exitcond10718_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        empty_23_reg_393 <= empty_24_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11021_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_360 <= empty_15_fu_603_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_360 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_441 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_1_reg_441 <= add_ln528_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln519_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_2_reg_475 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        i_2_reg_475 <= add_ln545_reg_1052;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_779_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_3_reg_509 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        i_3_reg_509 <= add_ln553_reg_1107;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln553_fu_847_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        i_4_reg_543 <= 4'd0;
    end else if (((icmp_ln565_fu_925_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        i_4_reg_543 <= add_ln565_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_404 <= 7'd1;
    end else if ((~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0))) begin
        i_reg_404 <= add_ln500_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_779_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        j_1_reg_486 <= 9'd0;
    end else if (((ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln541_reg_1073 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        j_1_reg_486 <= add_ln541_reg_1067;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln553_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        j_2_reg_520 <= 8'd0;
    end else if (((ap_enable_reg_pp7_iter1 == 1'b1) & (icmp_ln557_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        j_2_reg_520 <= add_ln557_reg_1126;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln519_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j_reg_452 <= 7'd0;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln523_reg_1018 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        j_reg_452 <= add_ln523_reg_1012;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_779_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        sum_2_reg_497 <= 32'd0;
    end else if (((ap_enable_reg_pp6_iter7 == 1'b1) & (icmp_ln541_reg_1073_pp6_iter6_reg == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        sum_2_reg_497 <= grp_fu_829_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln553_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        sum_4_reg_531 <= 32'd0;
    end else if (((ap_enable_reg_pp7_iter7 == 1'b1) & (icmp_ln557_reg_1132_pp7_iter6_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        sum_4_reg_531 <= grp_fu_911_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln519_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        sum_reg_463 <= 32'd0;
    end else if (((ap_enable_reg_pp5_iter7 == 1'b1) & (icmp_ln523_reg_1018_pp5_iter6_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        sum_reg_463 <= grp_fu_761_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        add_ln523_reg_1012 <= add_ln523_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        add_ln523_reg_1012_pp5_iter1_reg <= add_ln523_reg_1012;
        icmp_ln523_reg_1018 <= icmp_ln523_fu_727_p2;
        icmp_ln523_reg_1018_pp5_iter1_reg <= icmp_ln523_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        add_ln523_reg_1012_pp5_iter2_reg <= add_ln523_reg_1012_pp5_iter1_reg;
        add_ln523_reg_1012_pp5_iter3_reg <= add_ln523_reg_1012_pp5_iter2_reg;
        add_ln523_reg_1012_pp5_iter4_reg <= add_ln523_reg_1012_pp5_iter3_reg;
        icmp_ln523_reg_1018_pp5_iter2_reg <= icmp_ln523_reg_1018_pp5_iter1_reg;
        icmp_ln523_reg_1018_pp5_iter3_reg <= icmp_ln523_reg_1018_pp5_iter2_reg;
        icmp_ln523_reg_1018_pp5_iter4_reg <= icmp_ln523_reg_1018_pp5_iter3_reg;
        icmp_ln523_reg_1018_pp5_iter5_reg <= icmp_ln523_reg_1018_pp5_iter4_reg;
        icmp_ln523_reg_1018_pp5_iter6_reg <= icmp_ln523_reg_1018_pp5_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln528_reg_997 <= add_ln528_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        add_ln541_reg_1067 <= add_ln541_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        add_ln541_reg_1067_pp6_iter1_reg <= add_ln541_reg_1067;
        icmp_ln541_reg_1073 <= icmp_ln541_fu_795_p2;
        icmp_ln541_reg_1073_pp6_iter1_reg <= icmp_ln541_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp6_stage0_11001)) begin
        add_ln541_reg_1067_pp6_iter2_reg <= add_ln541_reg_1067_pp6_iter1_reg;
        add_ln541_reg_1067_pp6_iter3_reg <= add_ln541_reg_1067_pp6_iter2_reg;
        add_ln541_reg_1067_pp6_iter4_reg <= add_ln541_reg_1067_pp6_iter3_reg;
        icmp_ln541_reg_1073_pp6_iter2_reg <= icmp_ln541_reg_1073_pp6_iter1_reg;
        icmp_ln541_reg_1073_pp6_iter3_reg <= icmp_ln541_reg_1073_pp6_iter2_reg;
        icmp_ln541_reg_1073_pp6_iter4_reg <= icmp_ln541_reg_1073_pp6_iter3_reg;
        icmp_ln541_reg_1073_pp6_iter5_reg <= icmp_ln541_reg_1073_pp6_iter4_reg;
        icmp_ln541_reg_1073_pp6_iter6_reg <= icmp_ln541_reg_1073_pp6_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        add_ln545_reg_1052 <= add_ln545_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln553_reg_1107 <= add_ln553_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        add_ln557_reg_1126 <= add_ln557_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        add_ln557_reg_1126_pp7_iter1_reg <= add_ln557_reg_1126;
        icmp_ln557_reg_1132 <= icmp_ln557_fu_867_p2;
        icmp_ln557_reg_1132_pp7_iter1_reg <= icmp_ln557_reg_1132;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp7_stage0_11001)) begin
        add_ln557_reg_1126_pp7_iter2_reg <= add_ln557_reg_1126_pp7_iter1_reg;
        add_ln557_reg_1126_pp7_iter3_reg <= add_ln557_reg_1126_pp7_iter2_reg;
        add_ln557_reg_1126_pp7_iter4_reg <= add_ln557_reg_1126_pp7_iter3_reg;
        icmp_ln557_reg_1132_pp7_iter2_reg <= icmp_ln557_reg_1132_pp7_iter1_reg;
        icmp_ln557_reg_1132_pp7_iter3_reg <= icmp_ln557_reg_1132_pp7_iter2_reg;
        icmp_ln557_reg_1132_pp7_iter4_reg <= icmp_ln557_reg_1132_pp7_iter3_reg;
        icmp_ln557_reg_1132_pp7_iter5_reg <= icmp_ln557_reg_1132_pp7_iter4_reg;
        icmp_ln557_reg_1132_pp7_iter6_reg <= icmp_ln557_reg_1132_pp7_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        icmp_ln565_reg_1171 <= icmp_ln565_fu_925_p2;
        icmp_ln565_reg_1171_pp8_iter1_reg <= icmp_ln565_reg_1171;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0))) begin
        p_phi17_reg_428 <= S_AXIS_TSTRB_int_regslice;
        p_phi_reg_415 <= S_AXIS_TKEEP_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln557_reg_1132_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001)) | ((icmp_ln541_reg_1073_pp6_iter3_reg == 1'd0) & (ap_enable_reg_pp6_iter4 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)) | ((icmp_ln523_reg_1018_pp5_iter3_reg == 1'd0) & (ap_enable_reg_pp5_iter4 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        reg_582 <= grp_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_586 <= grp_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_591 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_596 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln565_fu_925_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        temp_last_V_reg_1180 <= temp_last_V_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln519_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        zext_ln522_reg_1007[8 : 0] <= zext_ln522_fu_717_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln536_fu_779_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        zext_ln540_reg_1062[7 : 0] <= zext_ln540_fu_785_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln553_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        zext_ln553_reg_1116[3 : 0] <= zext_ln553_fu_853_p1[3 : 0];
        zext_ln556_reg_1121[3 : 0] <= zext_ln556_fu_857_p1[3 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        InputToLayer1Weights_ce0 = 1'b1;
    end else begin
        InputToLayer1Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        Layer1ToLayer2Weights_ce0 = 1'b1;
    end else begin
        Layer1ToLayer2Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        Layer1_out_address0 = j_1_cast_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        Layer1_out_address0 = zext_ln528_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Layer1_out_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Layer1_out_address0 = p_cast_fu_615_p1;
    end else begin
        Layer1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        Layer1_out_ce0 = 1'b1;
    end else begin
        Layer1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        Layer1_out_d0 = reg_596;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Layer1_out_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Layer1_out_d0 = 32'd0;
    end else begin
        Layer1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((icmp_ln519_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((exitcond11021_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Layer1_out_we0 = 1'b1;
    end else begin
        Layer1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        Layer2ToOutputWeights_ce0 = 1'b1;
    end else begin
        Layer2ToOutputWeights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        Layer2_out_address0 = j_2_cast_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        Layer2_out_address0 = zext_ln545_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Layer2_out_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Layer2_out_address0 = p_cast1_fu_632_p1;
    end else begin
        Layer2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001)))) begin
        Layer2_out_ce0 = 1'b1;
    end else begin
        Layer2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        Layer2_out_d0 = reg_596;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Layer2_out_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Layer2_out_d0 = 32'd0;
    end else begin
        Layer2_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((icmp_ln536_fu_779_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)) | ((exitcond10920_fu_626_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        Layer2_out_we0 = 1'b1;
    end else begin
        Layer2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0)) | ((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln565_reg_1171 == 1'd0) & (1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter1 == 1'b1)))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int_regslice;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln565_reg_1171 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter1 == 1'b1))) begin
        M_AXIS_TVALID_int_regslice = 1'b1;
    end else begin
        M_AXIS_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        Out_layer_address0 = i_4_cast_fu_931_p1;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        Out_layer_address0 = zext_ln553_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Out_layer_address0 = p_cast2_fu_649_p1;
    end else begin
        Out_layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        Out_layer_ce0 = 1'b1;
    end else begin
        Out_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        Out_layer_d0 = reg_596;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Out_layer_d0 = 32'd0;
    end else begin
        Out_layer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | ((exitcond10819_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        Out_layer_we0 = 1'b1;
    end else begin
        Out_layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int_regslice;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0))) begin
        S_AXIS_TREADY_int_regslice = 1'b1;
    end else begin
        S_AXIS_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln523_fu_727_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln541_fu_795_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state46 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state46 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln557_fu_867_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state79 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state79 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln565_fu_925_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state111 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state111 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter5 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter4 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter6 == 1'b0) & (ap_enable_reg_pp7_iter5 == 1'b0) & (ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter7 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln541_reg_1073 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        ap_phi_mux_j_1_phi_fu_490_p4 = add_ln541_reg_1067;
    end else begin
        ap_phi_mux_j_1_phi_fu_490_p4 = j_1_reg_486;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (icmp_ln557_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        ap_phi_mux_j_2_phi_fu_524_p4 = add_ln557_reg_1126;
    end else begin
        ap_phi_mux_j_2_phi_fu_524_p4 = j_2_reg_520;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln523_reg_1018 == 1'd0) & (1'b0 == ap_block_pp5_stage0))) begin
        ap_phi_mux_j_phi_fu_456_p4 = add_ln523_reg_1012;
    end else begin
        ap_phi_mux_j_phi_fu_456_p4 = j_reg_452;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        grp_fu_559_p0 = Layer2ToOutputWeights_q0;
    end else if (((ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        grp_fu_559_p0 = Layer1ToLayer2Weights_q0;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        grp_fu_559_p0 = InputToLayer1Weights_q0;
    end else begin
        grp_fu_559_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        grp_fu_559_p1 = Layer2_out_q0;
    end else if (((ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        grp_fu_559_p1 = Layer1_out_q0;
    end else if (((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        grp_fu_559_p1 = incoming_inputs_q0;
    end else begin
        grp_fu_559_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_574_p1 = sum_4_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_574_p1 = sum_2_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_574_p1 = sum_reg_463;
    end else begin
        grp_fu_574_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter5 == 1'b1) & (icmp_ln523_reg_1018_pp5_iter4_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0))) begin
        grp_fu_761_in_valid = 1'b1;
    end else begin
        grp_fu_761_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter5 == 1'b1) & (icmp_ln541_reg_1073_pp6_iter4_reg == 1'd0) & (1'b0 == ap_block_pp6_stage0))) begin
        grp_fu_829_in_valid = 1'b1;
    end else begin
        grp_fu_829_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b1) & (icmp_ln557_reg_1132_pp7_iter4_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0))) begin
        grp_fu_911_in_valid = 1'b1;
    end else begin
        grp_fu_911_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        incoming_inputs_address0 = j_cast_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        incoming_inputs_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        incoming_inputs_address0 = i_cast_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        incoming_inputs_address0 = p_cast3_fu_666_p1;
    end else begin
        incoming_inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | (~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        incoming_inputs_ce0 = 1'b1;
    end else begin
        incoming_inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        incoming_inputs_d0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        incoming_inputs_d0 = bitcast_ln504_fu_700_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        incoming_inputs_d0 = 32'd0;
    end else begin
        incoming_inputs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((exitcond10718_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | (~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0)))) begin
        incoming_inputs_we0 = 1'b1;
    end else begin
        incoming_inputs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond11021_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond10920_fu_626_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond10819_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond10718_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln500_fu_671_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln519_fu_711_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln523_fu_727_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln523_fu_727_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln536_fu_779_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln541_fu_795_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter6 == 1'b0) & (ap_enable_reg_pp6_iter7 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln541_fu_795_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state78 : begin
            if (((icmp_ln553_fu_847_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (icmp_ln557_fu_867_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter6 == 1'b0) & (ap_enable_reg_pp7_iter7 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter6 == 1'b0) & (ap_enable_reg_pp7_iter7 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (icmp_ln557_fu_867_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((icmp_ln565_fu_925_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)) & ~((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((icmp_ln565_fu_925_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)) | ((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state114 : begin
            if (((1'b1 == ap_CS_fsm_state114) & (regslice_both_M_AXIS_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InputToLayer1Weights_address0 = zext_ln525_fu_751_p1;

assign Layer1ToLayer2Weights_address0 = zext_ln542_fu_819_p1;

assign Layer2ToOutputWeights_address0 = zext_ln559_1_fu_901_p1;

assign M_AXIS_TDATA_int_regslice = Out_layer_q0;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_V_U_vld_out;

assign S_AXIS_TREADY = regslice_both_S_AXIS_V_data_V_U_ack_in;

assign add_ln500_fu_677_p2 = (i_reg_404 + 7'd1);

assign add_ln523_fu_721_p2 = (ap_phi_mux_j_phi_fu_456_p4 + 7'd1);

assign add_ln525_fu_746_p2 = (tmp_3_fu_738_p3 + zext_ln522_reg_1007);

assign add_ln528_fu_705_p2 = (i_1_reg_441 + 9'd1);

assign add_ln541_fu_789_p2 = (ap_phi_mux_j_1_phi_fu_490_p4 + 9'd1);

assign add_ln542_fu_814_p2 = (tmp_4_fu_806_p3 + zext_ln540_reg_1062);

assign add_ln545_fu_773_p2 = (i_2_reg_475 + 8'd1);

assign add_ln553_fu_841_p2 = (i_3_reg_509 + 4'd1);

assign add_ln557_fu_861_p2 = (ap_phi_mux_j_2_phi_fu_524_p4 + 8'd1);

assign add_ln559_1_fu_896_p2 = (add_ln559_fu_890_p2 + zext_ln556_reg_1121);

assign add_ln559_fu_890_p2 = (tmp_5_fu_882_p3 + zext_ln559_fu_878_p1);

assign add_ln565_fu_919_p2 = (i_4_reg_543 + 4'd1);

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd77];

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_01001 = (((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp8_stage0_11001 = (((ap_enable_reg_pp8_iter2 == 1'b1) & ((1'b1 == ap_block_state113_io) | ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp8_iter1 == 1'b1) & ((1'b1 == ap_block_state112_io) | ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = (((ap_enable_reg_pp8_iter2 == 1'b1) & ((1'b1 == ap_block_state113_io) | ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp8_iter1 == 1'b1) & ((1'b1 == ap_block_state112_io) | ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171 == 1'd0)))));
end

always @ (*) begin
    ap_block_state10 = ((1'b0 == S_AXIS_TVALID_int_regslice) & (icmp_ln500_fu_671_p2 == 1'd0));
end

assign ap_block_state111_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state112_io = ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171 == 1'd0));
end

always @ (*) begin
    ap_block_state112_pp8_stage0_iter1 = ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171 == 1'd0));
end

always @ (*) begin
    ap_block_state113_io = ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state113_pp8_stage0_iter2 = ((1'b0 == M_AXIS_TREADY_int_regslice) & (icmp_ln565_reg_1171_pp8_iter1_reg == 1'd0));
end

assign ap_block_state13_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp5_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp6_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp6_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp6_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp6_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp6_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp7_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp7_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp7_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp7_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp7_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln504_fu_700_p1 = S_AXIS_TDATA_int_regslice;

assign empty_15_fu_603_p2 = (empty_reg_360 + 9'd1);

assign empty_18_fu_620_p2 = (empty_17_reg_371 + 8'd1);

assign empty_21_fu_637_p2 = (empty_20_reg_382 + 4'd1);

assign empty_24_fu_654_p2 = (empty_23_reg_393 + 7'd1);

assign exitcond10718_fu_660_p2 = ((empty_23_reg_393 == 7'd73) ? 1'b1 : 1'b0);

assign exitcond10819_fu_643_p2 = ((empty_20_reg_382 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond10920_fu_626_p2 = ((empty_17_reg_371 == 8'd129) ? 1'b1 : 1'b0);

assign exitcond11021_fu_609_p2 = ((empty_reg_360 == 9'd257) ? 1'b1 : 1'b0);

assign grp_fu_761_p2 = ((add_ln523_reg_1012_pp5_iter4_reg == 7'd73) ? 1'b1 : 1'b0);

assign grp_fu_829_p2 = ((add_ln541_reg_1067_pp6_iter4_reg == 9'd257) ? 1'b1 : 1'b0);

assign grp_fu_911_p2 = ((add_ln557_reg_1126_pp7_iter4_reg == 8'd129) ? 1'b1 : 1'b0);

assign i_4_cast_fu_931_p1 = i_4_reg_543;

assign i_cast_fu_683_p1 = i_reg_404;

assign icmp_ln500_fu_671_p2 = ((i_reg_404 == 7'd73) ? 1'b1 : 1'b0);

assign icmp_ln519_fu_711_p2 = ((i_1_reg_441 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln523_fu_727_p2 = ((ap_phi_mux_j_phi_fu_456_p4 == 7'd73) ? 1'b1 : 1'b0);

assign icmp_ln536_fu_779_p2 = ((i_2_reg_475 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln541_fu_795_p2 = ((ap_phi_mux_j_1_phi_fu_490_p4 == 9'd257) ? 1'b1 : 1'b0);

assign icmp_ln553_fu_847_p2 = ((i_3_reg_509 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln557_fu_867_p2 = ((ap_phi_mux_j_2_phi_fu_524_p4 == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln565_fu_925_p2 = ((i_4_reg_543 == 4'd9) ? 1'b1 : 1'b0);

assign j_1_cast_fu_801_p1 = ap_phi_mux_j_1_phi_fu_490_p4;

assign j_2_cast_fu_873_p1 = ap_phi_mux_j_2_phi_fu_524_p4;

assign j_cast_fu_733_p1 = ap_phi_mux_j_phi_fu_456_p4;

assign p_cast1_fu_632_p1 = empty_17_reg_371;

assign p_cast2_fu_649_p1 = empty_20_reg_382;

assign p_cast3_fu_666_p1 = empty_23_reg_393;

assign p_cast_fu_615_p1 = empty_reg_360;

assign temp_last_V_fu_936_p2 = ((i_4_reg_543 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_3_fu_738_p3 = {{ap_phi_mux_j_phi_fu_456_p4}, {8'd0}};

assign tmp_4_fu_806_p3 = {{ap_phi_mux_j_1_phi_fu_490_p4}, {7'd0}};

assign tmp_5_fu_882_p3 = {{ap_phi_mux_j_2_phi_fu_524_p4}, {3'd0}};

assign zext_ln522_fu_717_p1 = i_1_reg_441;

assign zext_ln525_fu_751_p1 = add_ln525_fu_746_p2;

assign zext_ln528_fu_769_p1 = add_ln528_reg_997;

assign zext_ln540_fu_785_p1 = i_2_reg_475;

assign zext_ln542_fu_819_p1 = add_ln542_fu_814_p2;

assign zext_ln545_fu_837_p1 = add_ln545_reg_1052;

assign zext_ln553_fu_853_p1 = i_3_reg_509;

assign zext_ln556_fu_857_p1 = i_3_reg_509;

assign zext_ln559_1_fu_901_p1 = add_ln559_1_fu_896_p2;

assign zext_ln559_fu_878_p1 = ap_phi_mux_j_2_phi_fu_524_p4;

always @ (posedge ap_clk) begin
    zext_ln522_reg_1007[14:9] <= 6'b000000;
    zext_ln540_reg_1062[15:8] <= 8'b00000000;
    zext_ln553_reg_1116[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln556_reg_1121[10:4] <= 7'b0000000;
end

endmodule //mlp_sigmoid
